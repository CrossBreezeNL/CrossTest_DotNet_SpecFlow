# The name of the pipeline name should be defined as below, to make it usable in the versioning of the NuGet pack task.
name: $(BuildDefinitionName)_$(Build.SourceBranchName)_2.0.0$(Rev:.r)

# #trigger:
# # YAML pipelines are configured by default with a CI trigger on all branches

# #Note 1: In this pipeline we use the subscription "AzureSQLConnection" which is linked to the resource group "CrossBreeze_AzureDevOps".
# #Note 2: the parameter dependsOn is used to order the run of the jobs.

jobs:
#This job runs on a linux image and contains a task to run a CLI script.
# In the CLI-Scrpit we will build a database server, configure to the new database server and then create the database "ExampleDatabase".
# NOTE: In this Job we don't create a resource group because the resource group is used in our Azure Subscription/Service Connection. The resource group should exist before the run of the Pipeline.

- job: createdb
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: AzureCLI@1
    inputs:
      azureSubscription: 'CrossBreeze playground(86e4dc3f-92e9-44a5-adeb-c03bf6a846fd)'
      scriptLocation: 'inlineScript'
      inlineScript: |
        #!/bin/bash
        
        location="West Europe"
        resource="CrossBreeze_AzureDevOps"
        server="CrossBreeze"
        database="ExampleDatabase"
        login="saadmin"
        password="Test1234_"
        startIP=0.0.0.0
        endIP=0.0.0.0
        
        echo "Creating $server in $location..."
        az sql server create --name $server --resource-group $resource --location "$location" --admin-user $login --admin-password $password
        echo "Configuring firewall..."
        az sql server firewall-rule create --resource-group $resource --server $server -n AllowYourIp --start-ip-address $startIP --end-ip-address $endIP
        echo "Creating database $database..."
        az sql db create -g $resource -s $server -n $database -e GeneralPurpose -f Gen5 -c 2 --compute-model Serverless --auto-pause-delay 120


#This job runs on a Windows image and contains tasks to install NuGet packages, build the VS solution, create the database tables And Run VS Tests.
- job: buildslnAndRunTests
  dependsOn: createdb
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: NuGetToolInstaller@1
    displayName: Install NuGet
  - task: NuGetCommand@2
    displayName: Install required NuGet packages from config
    inputs:
      nugetConfigPath: 'NuGet.config'
      restoreSolution: '**\CrossBreeze.CrossTest.sln'
  - task: Assembly-Info-NetFramework@2
    inputs:
      Path: '$(System.DefaultWorkingDirectory)'
      FileNames: '**\AssemblyInfo.cs'
      InsertAttributes: false
      FileEncoding: 'auto'
      WriteBOM: false
      VersionNumber: '$(Build.BuildNumber)'
      FileVersionNumber: '$(Build.BuildNumber)'
      LogLevel: 'verbose'
      FailOnWarning: false
      DisableTelemetry: false
  - task: AzurePowerShell@5
    inputs:
      azureSubscription: 'CrossBreeze playground(86e4dc3f-92e9-44a5-adeb-c03bf6a846fd)'
      ScriptType: 'InlineScript'
      Inline: |
        # Use this to update an app.config connection string
        $filePath="C:\Users\MooOthman\Desktop\App.config"
        $connectionString="Server=crossbreeze.database.windows.net;Database=ExampleDatabase;User Id=saadmin;Password=Test1234_;"
        $sqlConnectionNameToBeTransformed="ExampleMsSqlConnection"
        $connectionStringMaster="Server=crossbreeze.database.windows.net;Database=master;User Id=saadmin;Password=Test1234_;"
        
        # file not found, nothing to do
        if (-Not (Test-Path $filePath))
        {
          Write-Output "File not found: $filePath"
          return
        }
        # read the config in xml
        [System.Xml.XmlDocument]$doc = new-object System.Xml.XmlDocument
        $doc.Load($filePath)
        
        # add master db sql server
        $newNode = $doc.CreateElement("server")
        $newElement = $doc.configuration.crossTest.database.servers.AppendChild($newNode)
        $newattribute = $newElement.SetAttribute("name","MasterMsSqlServer")
        $newattribute = $newElement.SetAttribute("connectionName","MasterMsSqlConnection")
        $newattribute = $newElement.SetAttribute("type","MsSql")
        $newattribute = $newElement.SetAttribute("commandTimeout","10")
        # add master db sql connection string
        $newNode = $doc.CreateElement("add")
        $newElement = $doc.configuration.connectionStrings.AppendChild($newNode)
        $newattribute = $newElement.SetAttribute("name","MasterMsSqlConnection")
        $newattribute = $newElement.SetAttribute("connectionString",$connectionStringMaster)
        # find the connection string of example database and edit it
        foreach($item in $doc.get_DocumentElement().connectionStrings.add)
        {
          # use your name here
          if($item.name -eq $sqlConnectionNameToBeTransformed)
          {
            $item.connectionString = $connectionString
          }           
        }
        # save the new file
        $doc.Save($filePath)
      azurePowerShellVersion: 'LatestVersion'
    displayName: 'transform app.config'
  - task: VSBuild@1
    inputs:
      solution: '**\CrossBreeze.CrossTest.sln'
      platform: 'Any CPU'
      configuration: 'Release'
      clean: true
      maximumCpuCount: true
      msbuildArchitecture: 'x64'
  - task: SqlDacpacDeploymentOnMachineGroup@0
    inputs:
      TaskType: 'sqlQuery'
      SqlFile: '$(System.DefaultWorkingDirectory)\Examples\CrossBreeze_CrossTest_ExampleTests\create_tables.sql'
      ServerName: 'crossbreeze.database.windows.net'
      DatabaseName: 'ExampleDatabase'
      AuthScheme: 'sqlServerAuthentication'
      SqlUsername: 'saadmin'
      SqlPassword: 'Test1234_'
  - task: VSTest@2
    inputs:
      testSelector: 'testAssemblies'
      testAssemblyVer2: '$(System.DefaultWorkingDirectory)\Examples\CrossBreeze_CrossTest_ExampleTests\bin\Release\CrossBreeze.CrossTest.ExampleTests.dll'
      searchFolder: '$(System.DefaultWorkingDirectory)'
      resultsFolder: '$(System.DefaultWorkingDirectory)\TestResults'
      testFiltercriteria: 'TestCategory!=ExpectedToFail&TestCategory!=SSAS&TestCategory!=SSIS&TestCategory!=SqlAgent'
      platform: 'Any CPU'
      configuration: 'Release'
  - task: NuGetCommand@2
    inputs:
      command: 'pack'
      packagesToPack: '**/CrossBreeze.CrossTest.SpecFlow.nuspec'
      versioningScheme: 'byBuildNumber'
      packDestination: '$(Build.ArtifactStagingDirectory)'
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifact: '$(Build.DefinitionName)'
      publishLocation: 'pipeline'
# This job runs on a linux image and contains a task to run a CLI script.
# In the CLI-Scrpit we will configure to the database server, delete the database "Example-source-target" and delete the database server.
# The condition always() is used to delete the database server even if the pipeline rus is canceled 
- job: deletedb
  dependsOn: buildslnAndRunTests
  condition: always()
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: AzureCLI@1
    inputs:
      azureSubscription: 'CrossBreeze playground(86e4dc3f-92e9-44a5-adeb-c03bf6a846fd)'
      scriptLocation: 'inlineScript'
      inlineScript: |
        #!/bin/bash
        
        resource="CrossBreeze_AzureDevOps"
        server="CrossBreeze"
        database="ExampleDatabase"
        startIP=0.0.0.0
        endIP=0.0.0.0
        
        echo "Configuring firewall..."
        az sql server firewall-rule create --resource-group $resource --server $server -n AllowYourIp --start-ip-address $startIP --end-ip-address $endIP
        echo "Deleteing database $database..."
        az sql db delete --name $database --resource-group $resource --server $server --yes
        echo "Deleting $server ..."
        az sql server delete --name $server --resource-group $resource --yes